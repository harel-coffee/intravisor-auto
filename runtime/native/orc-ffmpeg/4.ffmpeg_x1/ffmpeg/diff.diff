diff -uar ffmpeg-3.4.11_works/fftools/cmdutils.c ffmpeg/fftools/cmdutils.c
--- ffmpeg-3.4.11_works/fftools/cmdutils.c	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/fftools/cmdutils.c	2022-10-14 15:56:22.000000000 +0100
@@ -2100,6 +2100,7 @@
     uint8_t* displaymatrix = av_stream_get_side_data(st,
                                                      AV_PKT_DATA_DISPLAYMATRIX, NULL);
     double theta = 0;
+#if 0
     if (displaymatrix)
         theta = -av_display_rotation_get((int32_t*) displaymatrix);
 
@@ -2110,7 +2111,7 @@
                "If you want to help, upload a sample "
                "of this file to ftp://upload.ffmpeg.org/incoming/ "
                "and contact the ffmpeg-devel mailing list. (ffmpeg-devel@ffmpeg.org)");
-
+#endif
     return theta;
 }
 
@@ -2272,3 +2273,18 @@
 }
 
 #endif
+
+int show_all(void *optctx, const char *opt, const char *arg) {
+	show_formats(optctx, opt, arg);
+	show_muxers(optctx, opt, arg);
+	show_demuxers(optctx, opt, arg);
+	show_devices(optctx, opt, arg);
+	show_codecs(optctx, opt, arg);
+	show_decoders(optctx, opt, arg);
+	show_encoders(optctx, opt, arg);
+	show_bsfs(optctx, opt, arg);
+	show_protocols(optctx, opt, arg);
+	show_filters(optctx, opt, arg);
+//	show_pix_fmts(optctx, opt, arg);
+	    return 0;
+}
\ No newline at end of file
diff -uar ffmpeg-3.4.11_works/fftools/cmdutils.h ffmpeg/fftools/cmdutils.h
--- ffmpeg-3.4.11_works/fftools/cmdutils.h	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/fftools/cmdutils.h	2022-10-14 15:56:22.000000000 +0100
@@ -244,6 +244,7 @@
     { "decoders",    OPT_EXIT,             { .func_arg = show_decoders },    "show available decoders" },               \
     { "encoders",    OPT_EXIT,             { .func_arg = show_encoders },    "show available encoders" },               \
     { "bsfs",        OPT_EXIT,             { .func_arg = show_bsfs },        "show available bit stream filters" },     \
+    { "all",         OPT_EXIT,             { .func_arg = show_all },         "show configurations" },    		\
     { "protocols",   OPT_EXIT,             { .func_arg = show_protocols },   "show available protocols" },              \
     { "filters",     OPT_EXIT,             { .func_arg = show_filters },     "show available filters" },                \
     { "pix_fmts",    OPT_EXIT,             { .func_arg = show_pix_fmts },    "show available pixel formats" },          \
@@ -549,6 +550,12 @@
 int show_encoders(void *optctx, const char *opt, const char *arg);
 
 /**
+ * Print all configs
+ */
+int show_all(void *optctx, const char *opt, const char *arg);
+
+
+/**
  * Print a listing containing all the filters supported by the
  * program.
  * This option processing function does not utilize the arguments.
diff -uar ffmpeg-3.4.11_works/fftools/ffmpeg.c ffmpeg/fftools/ffmpeg.c
--- ffmpeg-3.4.11_works/fftools/ffmpeg.c	2022-10-03 19:53:26.000000000 +0100
+++ ffmpeg/fftools/ffmpeg.c	2022-10-14 15:56:22.000000000 +0100
@@ -109,6 +109,8 @@
 
 #include "libavutil/avassert.h"
 
+int mypid;
+
 const char program_name[] = "ffmpeg";
 const int program_birth_year = 2000;
 
@@ -1670,7 +1672,7 @@
             last_time = cur_time;
             return;
         }
-        if ((cur_time - last_time) < 500000)
+        if ((cur_time - last_time) < 1000000)
             return;
         last_time = cur_time;
     }
@@ -1704,7 +1706,7 @@
 
             frame_number = ost->frame_number;
             fps = t > 1 ? frame_number / t : 0;
-            snprintf(buf + strlen(buf), sizeof(buf) - strlen(buf), "frame=%5d fps=%3.*f q=%3.1f ",
+            snprintf(buf + strlen(buf), sizeof(buf) - strlen(buf), "%d\tframe=%5d fps=%3.*f q=%3.1f ",mypid,
                      frame_number, fps < 9.95, fps, q);
             av_bprintf(&buf_script, "frame=%d\n", frame_number);
             av_bprintf(&buf_script, "fps=%.1f\n", fps);
@@ -1809,7 +1811,8 @@
     }
 
     if (print_stats || is_last_report) {
-        const char end = is_last_report ? '\n' : '\r';
+//        const char end = is_last_report ? '\n' : '\r';
+        const char end = is_last_report ? '\n' : '\n';
         if (print_stats==1 && AV_LOG_INFO > av_log_get_level()) {
             fprintf(stderr, "%s    %c", buf, end);
         } else
@@ -3789,7 +3792,6 @@
             if (out_codec) {
                 encoder_name   = out_codec->name;
                 desc = avcodec_descriptor_get(out_codec->id);
-            		printf("out_codec_name = %s, desc = %p %s %d %d\n", out_codec->name, desc, desc->name, out_codec->id, in_codec->id);
                 if (desc)
                     out_codec_name = desc->name;
                 if (!strcmp(encoder_name, out_codec_name))
@@ -4779,7 +4781,7 @@
 {
 }
 
-int main(int argc, char **argv)
+int ffmpeg_main(int argc, char **argv)
 {
     int i, ret;
     int64_t ti;
@@ -4800,6 +4802,10 @@
         argv++;
     }
 
+    int a;
+
+    mypid = ((unsigned long) (&a))/ 0x10000000;
+
     avcodec_register_all();
 #if CONFIG_AVDEVICE
     avdevice_register_all();
diff -uar ffmpeg-3.4.11_works/fftools/ffmpeg_opt.c ffmpeg/fftools/ffmpeg_opt.c
--- ffmpeg-3.4.11_works/fftools/ffmpeg_opt.c	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/fftools/ffmpeg_opt.c	2022-10-14 15:56:22.000000000 +0100
@@ -138,7 +138,7 @@
 
 
 static int intra_only         = 0;
-static int file_overwrite     = 0;
+static int file_overwrite     = 1;
 static int no_file_overwrite  = 0;
 static int do_psnr            = 0;
 static int input_sync;
@@ -3752,10 +3752,11 @@
         "set QSV hardware device (DirectX adapter index, DRM path or X11 display name)", "device"},
 #endif
 
+#if 0
     { "init_hw_device", HAS_ARG | OPT_EXPERT, { .func_arg = opt_init_hw_device },
         "initialise hardware device", "args" },
     { "filter_hw_device", HAS_ARG | OPT_EXPERT, { .func_arg = opt_filter_hw_device },
         "set hardware device used when filtering", "device" },
-
+#endif
     { NULL, },
 };
diff -uar ffmpeg-3.4.11_works/fftools/ffserver.c ffmpeg/fftools/ffserver.c
--- ffmpeg-3.4.11_works/fftools/ffserver.c	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/fftools/ffserver.c	2022-10-14 15:56:22.000000000 +0100
@@ -498,7 +498,7 @@
    /* use "ffmpeg" in the path of current program. Ignore user provided path */
     prog = av_strdup(my_program_name);
     if (prog) {
-        dirname = av_dirname(prog);
+        dirname = (char *)av_dirname(prog);
         pathname = *dirname ? av_asprintf("%s/%s", dirname, "ffmpeg")
                             : av_asprintf("ffmpeg");
         av_free(prog);
@@ -2672,7 +2672,7 @@
     }
 
     /* open feed */
-    fd = open(c->stream->feed_filename, O_RDWR);
+    fd = open(c->stream->feed_filename, O_RDWR, 0);
     if (fd < 0) {
         ret = AVERROR(errno);
         http_log("Could not open feed file '%s': %s\n",
@@ -3856,7 +3856,7 @@
         }
 
         /* get feed size and write index */
-        fd = open(feed->feed_filename, O_RDONLY);
+        fd = open(feed->feed_filename, O_RDONLY, 0);
         if (fd < 0) {
             http_log("Could not open output feed file '%s'\n",
                     feed->feed_filename);
@@ -3953,7 +3953,7 @@
     { NULL },
 };
 
-int main(int argc, char **argv)
+int ffserver_main(int argc, char **argv)
 {
     struct sigaction sigact = { { 0 } };
     int cfg_parsed;
Only in ffmpeg-3.4.11_works: file_example_MP3_700KB.mp3
Only in ffmpeg-3.4.11_works: file_example_WAV_1MG.wav
diff -uar ffmpeg-3.4.11_works/libavcodec/bitstream_filter.c ffmpeg/libavcodec/bitstream_filter.c
--- ffmpeg-3.4.11_works/libavcodec/bitstream_filter.c	2022-09-14 15:47:52.000000000 +0100
+++ ffmpeg/libavcodec/bitstream_filter.c	2022-10-14 15:56:22.000000000 +0100
@@ -36,7 +36,7 @@
     while (filter != f)
         filter = av_bsf_next(&opaque);
 
-    return av_bsf_next(&opaque);
+    return (AVBitStreamFilter *) av_bsf_next(&opaque);
 }
 
 void av_register_bitstream_filter(AVBitStreamFilter *bsf)
@@ -131,7 +131,7 @@
             return ret;
     }
 
-    pkt.data = buf;
+    pkt.data = (uint8_t *) buf;
     pkt.size = buf_size;
 
     ret = av_bsf_send_packet(priv->ctx, &pkt);
diff -uar ffmpeg-3.4.11_works/libavcodec/codec_desc.c ffmpeg/libavcodec/codec_desc.c
--- ffmpeg-3.4.11_works/libavcodec/codec_desc.c	2022-09-14 15:47:52.000000000 +0100
+++ ffmpeg/libavcodec/codec_desc.c	2022-10-14 15:56:22.000000000 +0100
@@ -1665,7 +1665,6 @@
         .props     = AV_CODEC_PROP_LOSSLESS,
         .mime_types= MT("image/png"),
     },
-
     /* various PCM "codecs" */
     {
         .id        = AV_CODEC_ID_PCM_S16LE,
@@ -3114,17 +3113,16 @@
         .name      = "scte_35",
         .long_name = NULL_IF_CONFIG_SMALL("SCTE 35 Message Queue"),
     },
-
     /* deprecated codec ids */
 };
 
 const AVCodecDescriptor *avcodec_descriptor_get(enum AVCodecID id)
 {
     int i;
-
-    for (i = 0; i < FF_ARRAY_ELEMS(codec_descriptors); i++)
+    for (i = 0; i < FF_ARRAY_ELEMS(codec_descriptors); i++) {
         if (codec_descriptors[i].id == id)
             return &codec_descriptors[i];
+    }
     return NULL;
 }
 
diff -uar ffmpeg-3.4.11_works/libavcodec/mpegvideo_enc.c ffmpeg/libavcodec/mpegvideo_enc.c
--- ffmpeg-3.4.11_works/libavcodec/mpegvideo_enc.c	2022-09-14 15:47:52.000000000 +0100
+++ ffmpeg/libavcodec/mpegvideo_enc.c	2022-10-14 15:56:23.000000000 +0100
@@ -3089,6 +3089,7 @@
 
             ff_mpv_reallocate_putbitbuffer(s, MAX_MB_BYTES, size_increase);
             if(s->pb.buf_end - s->pb.buf - (put_bits_count(&s->pb)>>3) < MAX_MB_BYTES){
+            printf("%lx %lx %lx %lx\n", s->pb.buf_end, s->pb.buf, (put_bits_count(&s->pb)>>3), MAX_MB_BYTES);
                 av_log(s->avctx, AV_LOG_ERROR, "encoded frame too large\n");
                 return -1;
             }
Only in ffmpeg-3.4.11_works/libavcodec/neon: mpegvideo.o
diff -uar ffmpeg-3.4.11_works/libavcodec/pcm.c ffmpeg/libavcodec/pcm.c
--- ffmpeg-3.4.11_works/libavcodec/pcm.c	2022-09-14 15:47:51.000000000 +0100
+++ ffmpeg/libavcodec/pcm.c	2022-10-14 15:56:23.000000000 +0100
@@ -98,6 +98,8 @@
     n           = frame->nb_samples * avctx->channels;
     samples     = (const short *)frame->data[0];
 
+    printf("%x %x %x\n", (int)sample_size, (int) n, (int)samples);
+
     if ((ret = ff_alloc_packet2(avctx, avpkt, n * sample_size, n * sample_size)) < 0)
         return ret;
     dst = avpkt->data;
Only in ffmpeg/libavdevice: alldevices.d
Only in ffmpeg/libavdevice: avdevice.d
Only in ffmpeg/libavdevice: lavfi.d
Only in ffmpeg/libavdevice: libavdevice.a
Only in ffmpeg/libavdevice: libavdevice.pc
Only in ffmpeg/libavdevice: libavdevice.version
Only in ffmpeg/libavdevice: utils.d
diff -uar ffmpeg-3.4.11_works/libavfilter/allfilters.c ffmpeg/libavfilter/allfilters.c
--- ffmpeg-3.4.11_works/libavfilter/allfilters.c	2022-09-14 15:47:49.000000000 +0100
+++ ffmpeg/libavfilter/allfilters.c	2022-10-14 15:56:23.000000000 +0100
@@ -401,7 +401,9 @@
     REGISTER_FILTER_UNCONDITIONAL(vsink_buffer);
     REGISTER_FILTER_UNCONDITIONAL(af_afifo);
     REGISTER_FILTER_UNCONDITIONAL(vf_fifo);
+#if 0
     ff_opencl_register_filter_kernel_code_all();
+#endif
 }
 
 void avfilter_register_all(void)
diff -uar ffmpeg-3.4.11_works/libavfilter/avfiltergraph.c ffmpeg/libavfilter/avfiltergraph.c
--- ffmpeg-3.4.11_works/libavfilter/avfiltergraph.c	2022-10-03 21:49:36.000000000 +0100
+++ ffmpeg/libavfilter/avfiltergraph.c	2022-10-14 15:56:23.000000000 +0100
@@ -234,9 +234,6 @@
         const AVFilterPad *pad;
         filt = graph->filters[i];
 
-	if(filt) 
-		printf("%d: %s %s\n", i, filt->name, filt->filter->name);
-
         for (j = 0; j < filt->nb_inputs; j++) {
             if (!filt->inputs[j] || !filt->inputs[j]->src) {
                 pad = &filt->input_pads[j];
@@ -248,9 +245,8 @@
         }
 
         for (j = 0; j < filt->nb_outputs; j++) {
-    	    pad = &filt->output_pads[j];
-    	    printf("OUTPUTS: %d %d %s %s\n", i, j, pad->name, filt->outputs[j]->dst->name);
             if (!filt->outputs[j] || !filt->outputs[j]->dst) {
+        	printf("%d\n", !filt->outputs[j]);
                 pad = &filt->output_pads[j];
                 av_log(log_ctx, AV_LOG_ERROR,
                        "Output pad \"%s\" with type %s of the filter instance \"%s\" of %s not connected to any destination\n",
diff -uar ffmpeg-3.4.11_works/libavfilter/buffersrc.c ffmpeg/libavfilter/buffersrc.c
--- ffmpeg-3.4.11_works/libavfilter/buffersrc.c	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/libavfilter/buffersrc.c	2022-10-14 15:56:23.000000000 +0100
@@ -349,7 +349,7 @@
         if (!s->channel_layout) {
             s->channel_layout = av_get_channel_layout(s->channel_layout_str);
             if (!s->channel_layout) {
-                av_log(ctx, AV_LOG_ERROR, "Invalid channel layout %s.\n",
+                av_log(ctx, AV_LOG_ERROR, "Invalid channel layout ...%s.\n",
                        s->channel_layout_str);
                 return AVERROR(EINVAL);
             }
diff -uar ffmpeg-3.4.11_works/libavformat/format.c ffmpeg/libavformat/format.c
--- ffmpeg-3.4.11_works/libavformat/format.c	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/libavformat/format.c	2022-10-14 15:56:23.000000000 +0100
@@ -311,6 +311,7 @@
         /* Read probe data. */
         if ((ret = av_reallocp(&buf, probe_size + AVPROBE_PADDING_SIZE)) < 0)
             goto fail;
+	printf("buf = %x, ret = %d\n", (int) buf, ret);
         if ((ret = avio_read(pb, buf + buf_offset,
                              probe_size - buf_offset)) < 0) {
             /* Fail if error was not end of file, otherwise, lower score. */
diff -uar ffmpeg-3.4.11_works/libavformat/os_support.c ffmpeg/libavformat/os_support.c
--- ffmpeg-3.4.11_works/libavformat/os_support.c	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/libavformat/os_support.c	2022-10-14 15:56:23.000000000 +0100
@@ -252,9 +252,9 @@
     return ioctlsocket(socket, FIONBIO, &param);
 #else
     if (enable)
-        return fcntl(socket, F_SETFL, fcntl(socket, F_GETFL) | O_NONBLOCK);
+        return fcntl(socket, F_SETFL, fcntl(socket, F_GETFL, 0) | O_NONBLOCK);
     else
-        return fcntl(socket, F_SETFL, fcntl(socket, F_GETFL) & ~O_NONBLOCK);
+        return fcntl(socket, F_SETFL, fcntl(socket, F_GETFL, 0) & ~O_NONBLOCK);
 #endif /* HAVE_WINSOCK2_H */
 }
 
diff -uar ffmpeg-3.4.11_works/libavformat/protocols.c ffmpeg/libavformat/protocols.c
--- ffmpeg-3.4.11_works/libavformat/protocols.c	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/libavformat/protocols.c	2022-10-14 15:56:23.000000000 +0100
@@ -95,6 +95,7 @@
 
 const char *avio_enum_protocols(void **opaque, int output)
 {
+#if 0
     const URLProtocol **p = *opaque;
 
     p = p ? p + 1 : url_protocols;
@@ -106,6 +107,10 @@
     if ((output && (*p)->url_write) || (!output && (*p)->url_read))
         return (*p)->name;
     return avio_enum_protocols(opaque, output);
+#else
+    printf("FIXME %s %d\n", __FILE__, __LINE__);
+	return 0;
+#endif
 }
 
 const URLProtocol **ffurl_get_protocols(const char *whitelist,
diff -uar ffmpeg-3.4.11_works/libavformat/rtpdec.c ffmpeg/libavformat/rtpdec.c
--- ffmpeg-3.4.11_works/libavformat/rtpdec.c	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/libavformat/rtpdec.c	2022-10-14 15:56:23.000000000 +0100
@@ -79,6 +79,7 @@
 
 void ff_register_rtp_dynamic_payload_handlers(void)
 {
+#if 0
     ff_register_dynamic_payload_handler(&ff_ac3_dynamic_handler);
     ff_register_dynamic_payload_handler(&ff_amr_nb_dynamic_handler);
     ff_register_dynamic_payload_handler(&ff_amr_wb_dynamic_handler);
@@ -101,7 +102,9 @@
     ff_register_dynamic_payload_handler(&ff_jpeg_dynamic_handler);
     ff_register_dynamic_payload_handler(&ff_mp4a_latm_dynamic_handler);
     ff_register_dynamic_payload_handler(&ff_mp4v_es_dynamic_handler);
+#endif
     ff_register_dynamic_payload_handler(&ff_mpeg_audio_dynamic_handler);
+#if 0
     ff_register_dynamic_payload_handler(&ff_mpeg_audio_robust_dynamic_handler);
     ff_register_dynamic_payload_handler(&ff_mpeg_video_dynamic_handler);
     ff_register_dynamic_payload_handler(&ff_mpeg4_generic_dynamic_handler);
@@ -118,7 +121,9 @@
     ff_register_dynamic_payload_handler(&ff_svq3_dynamic_handler);
     ff_register_dynamic_payload_handler(&ff_theora_dynamic_handler);
     ff_register_dynamic_payload_handler(&ff_vc2hq_dynamic_handler);
+#endif
     ff_register_dynamic_payload_handler(&ff_vorbis_dynamic_handler);
+#if 0
     ff_register_dynamic_payload_handler(&ff_vp8_dynamic_handler);
     ff_register_dynamic_payload_handler(&ff_vp9_dynamic_handler);
     ff_register_dynamic_payload_handler(&gsm_dynamic_handler);
@@ -127,6 +132,7 @@
     ff_register_dynamic_payload_handler(&realmedia_mp3_dynamic_handler);
     ff_register_dynamic_payload_handler(&speex_dynamic_handler);
     ff_register_dynamic_payload_handler(&t140_dynamic_handler);
+#endif
 }
 
 RTPDynamicProtocolHandler *ff_rtp_handler_find_by_name(const char *name,
@@ -565,8 +571,14 @@
 void ff_rtp_parse_set_crypto(RTPDemuxContext *s, const char *suite,
                              const char *params)
 {
+#if 0
     if (!ff_srtp_set_crypto(&s->srtp, suite, params))
         s->srtp_enabled = 1;
+#else
+	printf("%s %d workaround\n", __func__, __LINE__);
+	s->srtp_enabled = 0;
+#endif
+
 }
 
 /**
@@ -854,8 +866,12 @@
                         uint8_t **bufptr, int len)
 {
     int rv;
+#if 0
     if (s->srtp_enabled && bufptr && ff_srtp_decrypt(&s->srtp, *bufptr, &len) < 0)
         return -1;
+#else
+    printf("workaround %s %d\n", __func__, __LINE__);
+#endif
     rv = rtp_parse_one_packet(s, pkt, bufptr, len);
     s->prev_ret = rv;
     while (rv < 0 && has_next_packet(s))
@@ -866,7 +882,11 @@
 void ff_rtp_parse_close(RTPDemuxContext *s)
 {
     ff_rtp_reset_packet_queue(s);
+#if 0
     ff_srtp_free(&s->srtp);
+#else
+    printf("workaround %s %d\n", __func__, __LINE__);
+#endif
     av_free(s);
 }
 
diff -uar ffmpeg-3.4.11_works/libavformat/rtsp.c ffmpeg/libavformat/rtsp.c
--- ffmpeg-3.4.11_works/libavformat/rtsp.c	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/libavformat/rtsp.c	2022-10-14 15:56:23.000000000 +0100
@@ -2498,6 +2498,7 @@
     rt->media_type_mask = (1 << (AVMEDIA_TYPE_SUBTITLE+1)) - 1;
 
     ret = sdp_read_header(s);
+
     s->pb = NULL;
     return ret;
 
diff -uar ffmpeg-3.4.11_works/libavutil/atomic.c ffmpeg/libavutil/atomic.c
--- ffmpeg-3.4.11_works/libavutil/atomic.c	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/libavutil/atomic.c	2022-10-14 15:56:23.000000000 +0100
@@ -94,6 +94,7 @@
         *ptr = newval;
         return oldval;
     }
+
     return *ptr;
 }
 
diff -uar ffmpeg-3.4.11_works/libavutil/atomic.h ffmpeg/libavutil/atomic.h
--- ffmpeg-3.4.11_works/libavutil/atomic.h	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/libavutil/atomic.h	2022-10-14 15:56:23.000000000 +0100
@@ -34,7 +34,6 @@
 #endif
 
 #else
-
 /**
  * Load the current value stored in an atomic integer.
  *
diff -uar ffmpeg-3.4.11_works/libavutil/log.c ffmpeg/libavutil/log.c
--- ffmpeg-3.4.11_works/libavutil/log.c	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/libavutil/log.c	2022-10-14 15:56:23.000000000 +0100
@@ -379,8 +379,12 @@
 void av_vlog(void* avcl, int level, const char *fmt, va_list vl)
 {
     void (*log_callback)(void*, int, const char*, va_list) = av_log_callback;
+#if arm_sim
+    av_log_default_callback(avcl, level, fmt, vl);
+#else
     if (log_callback)
         log_callback(avcl, level, fmt, vl);
+#endif
 }
 
 int av_log_get_level(void)
diff -uar ffmpeg-3.4.11_works/libavutil/mem.c ffmpeg/libavutil/mem.c
--- ffmpeg-3.4.11_works/libavutil/mem.c	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/libavutil/mem.c	2022-10-14 15:56:23.000000000 +0100
@@ -160,7 +160,7 @@
     return r;
 }
 
-int av_reallocp(void *ptr, size_t size)
+int av_reallocp(void *ptr, size_t size) __attribute__((optnone))
 {
     void *val;
 
@@ -169,7 +169,9 @@
         return 0;
     }
 
+
     memcpy(&val, ptr, sizeof(val));
+
     val = av_realloc(val, size);
 
     if (!val) {
@@ -188,7 +190,7 @@
     return av_realloc(ptr, nmemb * size);
 }
 
-int av_reallocp_array(void *ptr, size_t nmemb, size_t size)
+int av_reallocp_array(void *ptr, size_t nmemb, size_t size) __attribute__((optnone))
 {
     void *val;
 
@@ -210,7 +212,7 @@
 #endif
 }
 
-void av_freep(void *arg)
+void av_freep(void *arg) __attribute__((optnone))
 {
     void *val;
 
@@ -277,7 +279,7 @@
     return ptr;
 }
 
-int av_dynarray_add_nofree(void *tab_ptr, int *nb_ptr, void *elem)
+int av_dynarray_add_nofree(void *tab_ptr, int *nb_ptr, void *elem) __attribute__((optnone))
 {
     void **tab;
     memcpy(&tab, tab_ptr, sizeof(tab));
@@ -288,10 +290,11 @@
     }, {
         return AVERROR(ENOMEM);
     });
+
     return 0;
 }
 
-void av_dynarray_add(void *tab_ptr, int *nb_ptr, void *elem)
+void av_dynarray_add(void *tab_ptr, int *nb_ptr, void *elem) __attribute__((optnone))
 {
     void **tab;
     memcpy(&tab, tab_ptr, sizeof(tab));
@@ -478,7 +481,7 @@
     return ptr;
 }
 
-void av_fast_malloc(void *ptr, unsigned int *size, size_t min_size)
+void av_fast_malloc(void *ptr, unsigned int *size, size_t min_size) __attribute__((optnone))
 {
     ff_fast_malloc(ptr, size, min_size, 0);
 }
diff -uar ffmpeg-3.4.11_works/libavutil/mem_internal.h ffmpeg/libavutil/mem_internal.h
--- ffmpeg-3.4.11_works/libavutil/mem_internal.h	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/libavutil/mem_internal.h	2022-10-14 15:56:23.000000000 +0100
@@ -24,10 +24,15 @@
 #include "avassert.h"
 #include "mem.h"
 
+#ifdef __CHERI_PURE_CAPABILITY__
+static inline int ff_fast_malloc(__intcap_t *ptr, unsigned int *size, size_t min_size, int zero_realloc)
+{
+    __intcap_t *val;
+#else
 static inline int ff_fast_malloc(void *ptr, unsigned int *size, size_t min_size, int zero_realloc)
 {
     void *val;
-
+#endif
     memcpy(&val, ptr, sizeof(val));
     if (min_size <= *size) {
         av_assert0(val || !min_size);
diff -uar ffmpeg-3.4.11_works/libavutil/random_seed.c ffmpeg/libavutil/random_seed.c
--- ffmpeg-3.4.11_works/libavutil/random_seed.c	2022-09-14 15:47:50.000000000 +0100
+++ ffmpeg/libavutil/random_seed.c	2022-10-14 15:56:23.000000000 +0100
@@ -140,5 +140,10 @@
         return seed;
     if (read_random(&seed, "/dev/random")  == sizeof(seed))
         return seed;
+#if 0
     return get_generic_seed();
+#else
+    printf("%s %d workaround\n", __FILE__, __LINE__);
+    return seed;
+#endif
 }
Only in ffmpeg/libswresample/aarch64: audio_convert_init.d
Only in ffmpeg/libswresample/aarch64: audio_convert_neon.d
Only in ffmpeg/libswresample/aarch64: resample.d
Only in ffmpeg/libswresample/aarch64: resample_init.d
Only in ffmpeg/libswresample: audioconvert.d
Only in ffmpeg/libswresample: dither.d
Only in ffmpeg/libswresample: libswresample.a
Only in ffmpeg/libswresample: libswresample.pc
Only in ffmpeg/libswresample: libswresample.version
Only in ffmpeg/libswresample: options.d
Only in ffmpeg/libswresample: rematrix.d
Only in ffmpeg/libswresample: resample.d
Only in ffmpeg/libswresample: resample_dsp.d
Only in ffmpeg/libswresample: swresample.d
Only in ffmpeg/libswresample: swresample_frame.d
Only in ffmpeg/libswscale/aarch64: hscale.d
Only in ffmpeg/libswscale/aarch64: output.d
Only in ffmpeg/libswscale/aarch64: swscale.d
Only in ffmpeg/libswscale/aarch64: swscale_unscaled.d
Only in ffmpeg/libswscale/aarch64: yuv2rgb_neon.d
Only in ffmpeg/libswscale: alphablend.d
Only in ffmpeg/libswscale: gamma.d
Only in ffmpeg/libswscale: hscale.d
Only in ffmpeg/libswscale: hscale_fast_bilinear.d
Only in ffmpeg/libswscale: input.d
Only in ffmpeg/libswscale: libswscale.a
Only in ffmpeg/libswscale: libswscale.pc
Only in ffmpeg/libswscale: libswscale.version
Only in ffmpeg/libswscale: options.d
Only in ffmpeg/libswscale: output.d
Only in ffmpeg/libswscale: rgb2rgb.d
Only in ffmpeg/libswscale: slice.d
Only in ffmpeg/libswscale: swscale.d
Only in ffmpeg/libswscale: swscale_unscaled.d
Only in ffmpeg/libswscale: utils.d
Only in ffmpeg/libswscale: vscale.d
Only in ffmpeg/libswscale: yuv2rgb.d
Only in ffmpeg-3.4.11_works: output.mkv
diff -uar ffmpeg-3.4.11_works/run.sh ffmpeg/run.sh
--- ffmpeg-3.4.11_works/run.sh	2022-09-14 15:47:51.000000000 +0100
+++ ffmpeg/run.sh	2022-10-14 15:56:23.000000000 +0100
@@ -1 +1,34 @@
-./configure         --disable-fast-unaligned         --disable-pthreads         --disable-w32threads         --disable-os2threads         --disable-debug         --disable-stripping         --disable-safe-bitstream-reader         --enable-ffmpeg         --enable-avcodec         --enable-avformat         --enable-avfilter         --disable-filters         --enable-protocol=pipe         --disable-swresample         --disable-swscale         --disable-network         --disable-d3d11va         --disable-dxva2         --disable-vaapi         --disable-vdpau         --enable-protocol=file         --disable-bzlib         --disable-iconv         --disable-libxcb         --disable-lzma         --disable-sdl2         --disable-securetransport         --disable-xlib         --disable-zlib           --disable-hwaccels  --disable-videotoolbox --disable-audiotoolbox 
+./configure         --disable-fast-unaligned         \
+		    --disable-pthreads         \
+		    --disable-w32threads        \
+		    --disable-os2threads         \
+		    --disable-debug         \
+		    --disable-stripping         \
+		    --disable-safe-bitstream-reader         \
+		    --disable-all	\
+		    --disable-ffmpeg         \
+		    --enable-avcodec         \
+		    --enable-avformat         \
+		    --enable-avfilter         \
+		    --disable-filters         \
+		    --disable-swresample         \
+		    --disable-swscale         \
+		    --disable-network         \
+		    --disable-d3d11va         \
+		    --disable-dxva2         \
+		    --disable-vaapi         \
+		    --disable-vdpau         \
+		    --enable-protocol=file         \
+		    --disable-bzlib         \
+		    --disable-iconv         \
+		    --disable-libxcb         \
+		    --disable-lzma         \
+		    --disable-sdl2         \
+		    --disable-securetransport         \
+		    --disable-xlib         \
+		    --disable-zlib          \
+		    --disable-hwaccels	\
+		    --disable-videotoolbox \
+		    --disable-audiotoolbox 
+
+echo "unset HAVE_MACH_MACH_TIME_H HAVE_ARC4RANDOM ARCH_AARCH64 HAVE_MACH_ABSOLUTE_TIME HAVE_SYSCTL HAVE_SYSCONF"
\ No newline at end of file
Only in ffmpeg-3.4.11_works: sound.wav
